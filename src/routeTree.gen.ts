/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedSettingsRouteImport } from './routes/_protected/settings'
import { Route as ProtectedHistoryRouteImport } from './routes/_protected/history'
import { Route as ProtectedJournalIndexRouteImport } from './routes/_protected/journal/index'
import { Route as ProtectedJournalEntryRouteImport } from './routes/_protected/journal/$entry'

const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedSettingsRoute = ProtectedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedHistoryRoute = ProtectedHistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedJournalIndexRoute = ProtectedJournalIndexRouteImport.update({
  id: '/journal/',
  path: '/journal/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedJournalEntryRoute = ProtectedJournalEntryRouteImport.update({
  id: '/journal/$entry',
  path: '/journal/$entry',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/history': typeof ProtectedHistoryRoute
  '/settings': typeof ProtectedSettingsRoute
  '/journal/$entry': typeof ProtectedJournalEntryRoute
  '/journal': typeof ProtectedJournalIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/history': typeof ProtectedHistoryRoute
  '/settings': typeof ProtectedSettingsRoute
  '/journal/$entry': typeof ProtectedJournalEntryRoute
  '/journal': typeof ProtectedJournalIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_protected/history': typeof ProtectedHistoryRoute
  '/_protected/settings': typeof ProtectedSettingsRoute
  '/_protected/journal/$entry': typeof ProtectedJournalEntryRoute
  '/_protected/journal/': typeof ProtectedJournalIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/history' | '/settings' | '/journal/$entry' | '/journal'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/history' | '/settings' | '/journal/$entry' | '/journal'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/history'
    | '/_protected/settings'
    | '/_protected/journal/$entry'
    | '/_protected/journal/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/history': {
      id: '/_protected/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof ProtectedHistoryRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/journal/': {
      id: '/_protected/journal/'
      path: '/journal'
      fullPath: '/journal'
      preLoaderRoute: typeof ProtectedJournalIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/journal/$entry': {
      id: '/_protected/journal/$entry'
      path: '/journal/$entry'
      fullPath: '/journal/$entry'
      preLoaderRoute: typeof ProtectedJournalEntryRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedHistoryRoute: typeof ProtectedHistoryRoute
  ProtectedSettingsRoute: typeof ProtectedSettingsRoute
  ProtectedJournalEntryRoute: typeof ProtectedJournalEntryRoute
  ProtectedJournalIndexRoute: typeof ProtectedJournalIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedHistoryRoute: ProtectedHistoryRoute,
  ProtectedSettingsRoute: ProtectedSettingsRoute,
  ProtectedJournalEntryRoute: ProtectedJournalEntryRoute,
  ProtectedJournalIndexRoute: ProtectedJournalIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
